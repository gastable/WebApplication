@model AMWP.Models.Cash

@{

    int memberID = 24;
    string CCY = "USD";
    if (Session["mem"] != null)
    {
        memberID = Convert.ToInt32(Session["mem"]);
        CCY = Convert.ToString(Session["CCY"]);
    };
}

<form class="needs-validation" novalidate action="@Url.Action("Edit")" method="post">

    @Html.AntiForgeryToken()


    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.SSN)

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.MemID, "MemID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("MemID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.MemID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.CCYID, "CCYID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("CCYID", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.CCYID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @*@Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })*@
        <div class="col">
            <div class="mb-2 text-left">修改 @ViewBag.Name 金額</div>
            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
            <div class="valid-feedback">
                good
            </div>
            <div class="invalid-feedback">
                請輸入金額
            </div>
            @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group text-right">
        <div class="text-right">
            <input type="submit" value="確定" class="btn btn-success" />
        </div>
    </div>

</form>

<script src="~/Scripts/jquery-3.4.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>


<script>
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();


</script>