
@using System.Data;

@model System.Data.DataTable
@{
    ViewBag.Title = "會員現金庫存";
    Layout = "~/Views/Shared/_MemberLayout.cshtml";
    int memberID = 22;
    string CCY = "美元";
    if (Session["mem"] != null)
    {
        memberID = Convert.ToInt32(Session["mem"]);
        CCY = Convert.ToString(Session["CCY"]);
    };

    var ccyList = new List<string>();
    var cashValues = new List<decimal>();
}
@*<div>
        <canvas id="cashPieChart"></canvas>
    </div>*@
<h3>會員現金庫存</h3>
<h4 class="text-danger">@ViewBag.CashMsg</h4>
<table class="table">
    <thead>
        <tr>
            <th>
                貨幣
            </th>
            <th>
                金額
            </th>
            <th>
                折合 @CCY
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (DataRow row in Model.Rows)
        {
            ccyList.Add(Convert.ToString(row["CCYID"]));
            cashValues.Add(Convert.ToDecimal(@row["ToCCY"]));
            <tr>
                <td>
                    @row["CCYID"]
                </td>
                <td>
                    @Math.Round(Convert.ToDecimal(@row["Amount"]), 2)
                </td>
                <td>
                    @Math.Round(Convert.ToDecimal(@row["ToCCY"]), 2)
                </td>
            </tr>  
        }
    </tbody>
</table>
<a class="btn btn-primary" href=@Url.Action("Create", "Cash", new {id=memberID})><i class="bi bi-plus-circle"></i>新增資料</a>
@section scripts{
    <script>
        @*var datalegends = @Html.Raw(ccyList);
        var cash = @Html.Raw(cashValues);*@
       
        //const data = {
        //    labels: datalegends,
        //    datasets: [{
        //        label: ['現值'],
        //        data: cash,
        //        backgroundColor: ["#b2e061", "#bd7ebe", "#ffb55a", "#ffee65", "#beb9db", "#fdcce5", "#8bd3c7", "#fd7f6f", "#7eb0d5"],
        //    }]
        //};

        //const config = {
        //    type: "pie",
        //    data,
        //    options: {
        //        maintainAspectRatio: true,
        //        plugins: {
        //            datalabels: {
        //                align: 'center',
        //                formatter: (value, context) => {
        //                    const datapoints = context.chart.config.data.datasets[0].data;
        //                    //console.log(datapoints);
        //                    const totalvalue = datapoints.reduce((total, datapoint) => total + datapoint,
        //                        0);
        //                    const percentageValue = (value / totalvalue * 100).toFixed(2);
        //                    const display = [`${percentageValue}%`]
        //                    return display;
        //                }
        //            },
        //            legend: {
        //                display: true,
        //                onHover: (event, chartElement) => {
        //                    event.native.target.style.cursor = 'pointer';
        //                },
        //                onLeave: (event, chartElement) => {
        //                    event.native.target.style.cursor = 'default';
        //                }
        //            }
        //        }
        //    },
        //    plugins: [ChartDataLabels]
        //};
        //const circleChart = new Chart(document.getElementById("cashPieChart"),
        //    config);




    </script>
}


