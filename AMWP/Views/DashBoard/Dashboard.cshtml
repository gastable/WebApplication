@model AMWP.ViewModels.Dashboard

@{
    ViewBag.Title = "會員資產管理";
    Layout = "~/Views/Shared/_MemberLayout.cshtml";

    int memberID = 24;
    string CCY = "USD";
    string symbolstr = "VT";
    var cashSum = Convert.ToDouble(Session["cashSum"]);
    var secSum = Convert.ToDouble(Session["secSum"]);
    var pptySum = Convert.ToDouble(Session["pptySum"]);
    if (Session["mem"] != null)
    {
        memberID = Convert.ToInt32(Session["mem"]);
        CCY = Convert.ToString(Session["CCY"]);
    }
}
@*@if(Session["mem"] == null) {
    <h3 class="alert alert-info text-center">展示畫面</h3>
    }*@
<div class="">
    <div class="row justify-content-around align-items-end">
        <div class="row col-md-6 row-cols-2 mt-3 mb-3 shadow justify-content-around align-items-center rounded-lg">
            <div class="col">
                <h4 class="text-center">資產淨值</h4>
                <table class="table table-sm text-center">
                    <thead class="thead">
                        <tr>
                            <th>
                                類別
                            </th>
                            <th>
                                現值(@CCY)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <a class="btn btn-cash" href="@Url.Action("Display","MemberCash",new { id = Session["mem"]!=null? Session["mem"]:3,ccy=Session["CCY"]!=null? Session["CCY"]:"USD" })">現金</a>
                            </td>
                            <td class="align-middle">
                                @cashSum
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a class="btn btn-securities" href="@Url.Action("DisplaySecOrders","MemberSecurities", new { id = Session["mem"]!=null? Session["mem"]:3,ccy=Session["CCY"]!=null? Session["CCY"]:"USD" })">證券</a>
                            </td>
                            <td class="align-middle">
                                @secSum
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <a class="btn btn-property" href="@Url.Action("Display","MemberProperties",new { id = Session["mem"]!=null? Session["mem"]:3,ccy=Session["CCY"]!=null? Session["CCY"]:"USD" })">房產</a>
                            </td>
                            <td class="align-middle">
                                0
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="col">
                <canvas id="assetTypeDoughnut" aria-label="各類資產配置" role="img"></canvas>
                <div class="text-center">各類資產配置</div>
            </div>
        </div>
        <div class="row col-md-6 row-cols-2 mt-3 mb-3 shadow justify-content-around align-items-center rounded">
            <div class="col">
                <h4 class="text-center">證券配置</h4>
                <table class="table table-sm text-center">
                    <thead class="thead">
                        <tr>
                            <th>
                                代號
                            </th>
                            <th>
                                股數
                            </th>
                            <th>
                                現值(@CCY)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.secOrders)
                        {
                            <tr>
                                <td>

                                    @Html.ActionLink(item.SecID, "Display", "Performance", new { id = Session["mem"] != null ? Session["mem"] : 3, symbol = symbolstr }, new { @class = "btn btn-cash" })
                                </td>
                                <td class="align-middle">
                                    @item.Share
                                </td>
                                <td class="align-middle">
                                    @(Math.Round(Convert.ToDouble(item.Share*item.Price),2))
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="col ">
                <canvas id="secAllocDoughnut"></canvas>

                <div class="text-center">證券類別佔比</div>
            </div>
        </div>

    </div>

    <div>
        <div>
            <canvas id="secValueLineChart" aria-label="資產股價圖" role="img"></canvas>

        </div>
    </div>
</div>

<div hidden>
    @Html.Action("_GetMemberSecList", "MemberSecurities")
    @Html.Action("Display", "MemberCash")
</div>
@section dashboardCSS{
    <link href="~/Content/dashboard.css" rel="stylesheet" />
    <style>
        .btn-securities {
            color: #1f1a1a;
            background-color: #bd7ebe;
            border-color: #bd7ebe;
        }

        .btn-property {
            color: #1f1a1a;
            background-color: #b2e061;
            border-color: #b2e061;
        }

        .btn-cash {
            color: #1f1a1a;
            background-color: #ffb55a;
            border-color: #ffb55a;
        }
    </style>
}

@section scripts{
    <script>
        $('#sidebarMenu .nav-link').removeClass('active');
        $('#navLink1').addClass('active');
        var id =@Html.Raw(memberID);
        //CircleChart(canvasId,chartType,dataLegend,dataset,tooltipON)
        const chartType1 = 'doughnut'
        const dataLegend1 = ['現金', '證券', '房產'];
        const dataset1 = [@cashSum,@secSum, @pptySum];
        circleChart('assetTypeDoughnut', chartType1, dataLegend1, dataset1);

        const chartType2 = 'doughnut'
        const dataLegend2 = ['VT', 'SPY', 'BND'];
        const dataset2 = [1500000, 5000000, 1600000];
        circleChart('secAllocDoughnut', chartType2, dataLegend2, dataset2);



        

        //圓形圖
            function circleChart(id, chartType, types, assetNets) {
                const data = {
                    labels: types,
                    datasets: [{
                        label: ['現值'],
                        data: assetNets,
                        backgroundColor: ["#ffb55a", "#bd7ebe", "#b2e061", "#ffee65", "#beb9db", "#fdcce5", "#8bd3c7", "#fd7f6f", "#7eb0d5"],
                    }]
                };
                var legendON = assetNets.length < 5 ? true : false;

                const config = {
                    type: chartType,
                    data,
                    options: {
                        maintainAspectRatio: true,
                        plugins: {
                            datalabels: {
                                align: 'center',
                                formatter: (value, context) => {
                                    const datapoints = context.chart.config.data.datasets[0].data;
                                    //console.log(datapoints);
                                    const totalvalue = datapoints.reduce((total, datapoint) => total + datapoint,
                                        0);
                                    const percentageValue = (value / totalvalue * 100).toFixed(2);
                                    const display = [`${percentageValue}%`]
                                    return display;
                                },
                                font: {
                                    weight: 'bold'
                                }
                            },
                            legend: {
                                display: legendON,
                                onHover: (event, chartElement) => {
                                    event.native.target.style.cursor = 'pointer';
                                },
                                onLeave: (event, chartElement) => {
                                    event.native.target.style.cursor = 'default';
                                }
                            }
                        }
                    },
                    plugins: [ChartDataLabels]
                };
                const circleChart = new Chart(document.getElementById(id),
                    config);
            }

        //證券淨值圖
        var lineChart;
        var lineData=[];
        var lineLabels = [];

        function GetValueLineChart(id) {
            $.ajax({
                type: "get",
                url: 'http://localhost:56540/MemberSecurities/GetValueLineChart/'+id,
                async: false,
                success: function (data) {                    
                    for (let i = 0; i < data['data'].length; i++) {
                        lineData.push(data['data'][i]);
                        lineLabels.push(data['labels'][i]);
                    }
                }
            });
        };
        GetValueLineChart(id);
        console.log(lineLabels);
        data = {
            labels: lineLabels,
            datasets: [{
                label: ['證券淨值'],
                data: lineData,
                borderWidth: 1,
                pointRadius: 0
            }]
        };

        config = {
            type: "line",
            data,
            options: {
                animation: false,
                scales: {
                    x: { grid: { drawOnChartArea: false } },
                    y: {
                        beginAtZero: false,
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        onHover: (event, chartElement) => {
                            event.native.target.style.cursor = 'pointer';
                        },
                        onLeave: (event, chartElement) => {
                            event.native.target.style.cursor = 'default';
                        }
                    }
                }
            }
        };
        lineChart = new Chart(document.getElementById("secValueLineChart"),
            config);

        //取得網址CCY參數
        const url = window.location.href;
        const queryArr1 = url.split('?');
        const queryArr2 = queryArr1[1].split('=');
    </script>
}
